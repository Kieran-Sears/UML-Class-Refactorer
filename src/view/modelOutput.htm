<!DOCTYPE html>
<!--
CBSproblem.html
Copyright Jim Smith, UWE June 2015.

definition of the elements of the CBS problem with the jointJS script to display the UML 
-->

<html>
    <head>
        <link rel="canonical" href="http://www.jointjs.com/" />
        <link rel="stylesheet" type="text/css" href="joint.ui.paperScroller.css" />        
    </head>
    <body>

        <div id="paper" class="paper"/></div>

    <link rel="stylesheet" type="text/css" href="joint.css" />

    <script src="jquery.min.js"></script>
    <script src="lodash.min.js"></script>
    <script src="backbone-min.js"></script>
    <script src="joint.js"></script>
    <script>
        var graph = new joint.dia.Graph;

        var paper = new joint.dia.Paper({
            el: $('#paper'),
            width: 1000,
            height: 600,
            gridSize: 1,
            model: graph
        });


        var uml = joint.shapes.uml;
        //empty container fo the classes which get add by UMLProcessor
        var classes = {
Shop: new uml.Class({position: { x:500.0  , y: 250.0},size: { width: 150, height: 370.0 },name:'Shop',attributes: ['collection<Basket>','newsLetter','stockLevel','collection<BookContainer>','collection<ElectronicNewsLetter>','basket','collection<Book>','emailAddr','newsLetter','collection<Customer>'], 
     methods: ['getStockLevel','BookContainer','sendMonthlyTitles','addToBasket','addBook','setTitle','getRecentlyAdded','setRecentlyAdded']
}),
CustomerController: new uml.Class({position: { x:405.8724504646834  , y: 445.4578706170074},size: { width: 150, height: 30.0 },name:'CustomerController',attributes: [], 
     methods: ['proceedPayment']
}),
ElectronicNewsLetter: new uml.Class({position: { x:194.3697665109214  , y: 493.7319780454559},size: { width: 150, height: 90.0 },name:'ElectronicNewsLetter',attributes: ['collection<Book>','title'], 
     methods: ['getTitle','browseForBook']
}),
Customer: new uml.Class({position: { x:24.757783024395252  , y: 358.47093477938955},size: { width: 150, height: 70.0 },name:'Customer',attributes: ['cardNumber'], 
     methods: ['setStockLevel','doMenu']
}),
Book: new uml.Class({position: { x:24.757783024395223  , y: 141.5290652206105},size: { width: 150, height: 50.0 },name:'Book',attributes: ['name'], 
     methods: ['clearRecentlyAdded']
}),
Basket: new uml.Class({position: { x:194.36976651092135  , y: 6.268021954544082},size: { width: 150, height: 30.0 },name:'Basket',attributes: [], 
     methods: ['checkStockLevel']
}),
BookContainer: new uml.Class({position: { x:405.8724504646833  , y: 54.54212938299253},size: { width: 150, height: 70.0 },name:'BookContainer',attributes: ['collection<Book>','basket','collection<CustomerController>'], 
     methods: []
})        };
        //added each class to the graph as a cell
        _.each(classes, function (c) {
            c.updateRectangles
        });
        _.each(classes, function (c) {
            graph.addCell(c);
        });

        //empty array fo the links which get add by UMLProcessor
        var relations = [
new joint.dia.Link({ source: { id: classes.Shop.id }, target: { id: classes.ElectronicNewsLetter.id }}),
new joint.dia.Link({ source: { id: classes.Shop.id }, target: { id: classes.Customer.id }}),
new joint.dia.Link({ source: { id: classes.Shop.id }, target: { id: classes.Book.id }}),
new joint.dia.Link({ source: { id: classes.Shop.id }, target: { id: classes.Basket.id }}),
new joint.dia.Link({ source: { id: classes.Shop.id }, target: { id: classes.BookContainer.id }}),
new joint.dia.Link({ source: { id: classes.ElectronicNewsLetter.id }, target: { id: classes.Book.id }}),
new joint.dia.Link({ source: { id: classes.BookContainer.id }, target: { id: classes.CustomerController.id }}),
new joint.dia.Link({ source: { id: classes.BookContainer.id }, target: { id: classes.Book.id }}),
        ];
        //add the links ot the graph
        _.each(relations, function (r) {
            graph.addCell(r);
        });
        //make the multiple links seperate
        _.each(classes, function (c) {
            adjustVertices(graph, c);
        });


        paper.scaleContentToFit();

        var myAdjustVertices = _.partial(adjustVertices, graph);

        // adjust vertices when a cell is removed or its source/target was changed
        graph.on('add remove change:source change:target', myAdjustVertices);

        // also when an user stops interacting with an element.
        paper.on('cell:pointerup', myAdjustVertices);




    </script>






    <link rel="stylesheet" href="http://www.jointjs.com/vendor/prism/prism.css" type="text/css" />
    <script src="http://www.jointjs.com/vendor/prism/prism.js"></script>
</body>
</html>
